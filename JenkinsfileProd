node {
    properties(
        [
            disableConcurrentBuilds()
        ]
    )

    

    stage('Clone repository'){
        checkout scm
    }

    try {
        stage('Build and Upload App Bundle to Play Store'){
            withCredentials([
                [$class: "FileBinding", credentialsId: 'play-store-svc-acc', variable: 'PLAY_STORE_SVC_ACC'],
                [$class: "FileBinding", credentialsId: 'flutter-demo-prod-keystore', variable: 'KEYSTORE'],
                [$class: "FileBinding", credentialsId: 'flutter-demo-prod-key-properties', variable: 'KEY_PROPERTIES'],
            ]){
                sh "sudo cp appsettings.json appsettings.local.json && sudo chmod 755 appsettings.local.json"
                sh "sudo cp ${KEYSTORE} keystore.jks && sudo chmod 755 keystore.jks"
                sh "sudo cp ${KEY_PROPERTIES} android/key.properties && sudo chmod 755 android/key.properties"
                sh "sudo cp ${PLAY_STORE_SVC_ACC} play-store-service-account.json && sudo chmod 755 play-store-service-account.json"
                def app = docker.build("flutter:demo", "--force-rm --rm -f DockerfileProd .")
                app.inside('-v $WORKSPACE:/output -u root') {
                    sh """
                    cp /app/build/app/outputs/bundle/prodRelease/app-prod-release.aab /output
                    """
                }
                archiveArtifacts artifacts: 'app-prod-release.aab'
            }

            echo "App Bundle (${env.BRANCH_NAME}) uploaded to Play Store"
        }
    } catch (e) {
        throw e
    } finally {
        sh "sudo docker image prune -a --filter=label=stage=flutter-builder"
        sh "sudo docker image prune -a --filter=label=stage=flutter-deployer"
    }

    stage('Completed'){
        echo "Completed"
    }
}